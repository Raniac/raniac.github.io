webpackJsonp([1],{"2dIX":function(e,t){},"4WSK":function(e,t){},B7zh:function(e,t){},EHTM:function(e,t,n){e.exports=n.p+"static/img/Alipay_QR.fcdfccd.png"},EOlj:function(e,t){},FFjo:function(e,t){},G8Ku:function(e,t,n){e.exports=n.p+"static/img/Joker.b785c82.jpg"},J0Ph:function(e,t){e.exports='<h1 id="djangovue前后端分离开发">Django+Vue前后端分离开发</h1>\n<blockquote>\n<p>未经许可请勿转载。<br>Please do not reprint this article without permission.</p>\n</blockquote>\n<p><a href="https://github.com/Raniac/NEURO-LEARN/">Project repository - NEURO-LEARN</a></p>\n<h2 id="djangovuecelery">Django+Vue+Celery</h2>\n<h3 id="environment">Environment</h3>\n<ul>\n<li>For Django: Python, Django, MySQL, etc. Using pip to install modules including Django and MySQL is recommended;</li>\n<li>For Vue: Node.js. Using npm to install modules including Element-UI is recommended;</li>\n<li>For celery: rabbitmq, celery, django-celery. Using apt-get to install rabbitmq-server, and pip to install celery and django-celery;</li>\n</ul>\n<h3 id="build-project">Build Project</h3>\n<ul>\n<li>Create project;  <pre><code>$ django-admin startproject neurolearn</code></pre></li>\n<li>Create Django app as backend;  <pre><code>$ cd neurolearn\n$ python manage.py startapp backend</code></pre></li>\n<li>Install mysql if none installed, refering to <a href="https://blog.csdn.net/weixx3/article/details/80782479"><em>installation of MySQL on Ubuntu18.04</em></a>, <a href="https://www.cnblogs.com/cpl9412290130/p/9583868.html"><em>solving access denied for user root@localhost</em></a>, and <a href="https://www.cnblogs.com/jiangxiaobo/p/7089345.html"><em>creating a database</em></a>;<pre><code>&#39;NAME&#39;: &#39;neurolearn&#39;\n&#39;USER&#39;: &#39;root&#39;\n&#39;PASSWORD&#39;: &#39;root&#39;</code></pre></li>\n<li>Change the default database to mysql and add backend to apps in settings.py;<pre><code class="language-python">DATABASES = {\n  &#39;default&#39;: {\n      &#39;ENGINE&#39;: &#39;django.db.backends.mysql&#39;,\n      &#39;NAME&#39;: &#39;neurolearn&#39;,\n      &#39;USER&#39;: &#39;root&#39;,\n      &#39;PASSWORD&#39;: &#39;root&#39;,\n      &#39;HOST&#39;: &#39;127.0.0.1&#39;,\n  }\n}</code></pre>\n</li>\n<li>Initialize database and start server to test;<pre><code>$ python manage.py makemigrations backend\n$ python manage.py migrate\n$ python manage.py runserver</code></pre></li>\n<li>Install vue-cli to initialize a vue project;<pre><code>$ npm install -g vue-cli\n$ npm view vue-cli version // check the package version</code></pre></li>\n<li>Create VueJS project as frontend;  <pre><code>$ vue-init webpack frontend</code></pre></li>\n<li>Install vue dependencies and build the vue project;<pre><code>$ cd frontend\n$ npm install // install dependencies\n$ npm run build // build project</code></pre></li>\n<li>Add &#39;backend&#39; to the INSTALLED_APPS in neurolearn/neurolearn/settings.py;<pre><code class="language-python">INSTALLED_APPS = [\n  &#39;django.contrib.admin&#39;,\n  &#39;django.contrib.auth&#39;,\n  &#39;django.contrib.contenttypes&#39;,\n  &#39;django.contrib.sessions&#39;,\n  &#39;django.contrib.messages&#39;,\n  &#39;django.contrib.staticfiles&#39;,\n  &#39;backend&#39;,\n]</code></pre>\n</li>\n<li>Create superuser of django in order to use django admin.<pre><code class="language-bash">$ python manage.py createsuperuser\nusername: root\nemail: leibingye@outlook.com\npassword: root\nlocalhost:8000/admin/</code></pre>\n</li>\n</ul>\n<p><em>References</em><br><a href="https://cloud.tencent.com/developer/article/1005607">整合Django+Vue.js框架快速搭建web项目</a><br><a href="https://blog.csdn.net/Jack_wise/article/details/80690826">后端Django+前段Vue.js快速搭建项目</a><br><a href="https://www.haoht123.com/1678.html">vue使用npm run build命令打包项目</a></p>\n<h3 id="architecture-design">Architecture Design</h3>\n<p><img src="https://upload-images.jianshu.io/upload_images/13702947-1a3590a03cd0858f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="architecture_design_web.png"></p>\n<h3 id="integrate-vue-into-django">Integrate Vue into Django</h3>\n<ul>\n<li>Configure url paths in neurolearn/neurolearn/urls.py;<pre><code>from django.conf.urls import url\nfrom django.contrib import admin\nfrom django.views.generic import TemplateView\nurlpatterns = [\n  url(r&#39;^admin/&#39;, admin.site.urls),\n  url(r&#39;^$&#39;, TemplateView.as_view(template_name=&quot;index.html&quot;)),\n]</code></pre></li>\n<li>Configure the &#39;DIRS&#39; in neurolearn/neurolearn/settings.py;<pre><code>TEMPLATES = [\n  {\n      &#39;BACKEND&#39;: &#39;django.template.backends.django.DjangoTemplates&#39;,\n      &#39;DIRS&#39;: [&#39;frontend/dist&#39;],\n      &#39;APP_DIRS&#39;: True,\n      &#39;OPTIONS&#39;: {\n          &#39;context_processors&#39;: [\n              &#39;django.template.context_processors.debug&#39;,\n              &#39;django.template.context_processors.request&#39;,\n              &#39;django.contrib.auth.context_processors.auth&#39;,\n              &#39;django.contrib.messages.context_processors.messages&#39;,\n          ],\n      },\n  },\n]</code></pre></li>\n<li>Change time zone and language code;<pre><code class="language-python">LANGUAGE_CODE = &#39;zh-Hans&#39;\nTIME_ZONE = &#39;Asia/Shanghai&#39;</code></pre>\n</li>\n<li>Add the path of static files rendered by django;<pre><code class="language-python">STATICFILES_DIRS = [\n  os.path.join(BASE_DIR, &quot;frontend/dist/static&quot;)\n]</code></pre>\n</li>\n<li>Run server to test frontend rendering by django;<pre><code>$ python manage.py runserver</code></pre></li>\n<li>Run the following command each time <em>frontend</em> is modified;<pre><code>$ cd frontend\n$ npm run build</code></pre></li>\n<li>Using the following command allows debugging in Vue environment;<pre><code>$ cd frontend\n$ npm run dev</code></pre></li>\n<li>Using Vue environment to visit Django API will result in cross-domain issues, one solution is using proxyTable in Vue, and the other is using django-cors-headers;<pre><code>$ pip install django-cors-headers</code></pre></li>\n<li>After installing django-cors-headers, we need to configure it in settings.py;<pre><code>MIDDLEWARE = [\n  &#39;django.middleware.security.SecurityMiddleware&#39;,\n  &#39;django.contrib.sessions.middleware.SessionMiddleware&#39;,\n  &#39;corsheaders.middleware.CorsMiddleware&#39;,\n  &#39;django.middleware.common.CommonMiddleware&#39;,\n  &#39;django.middleware.csrf.CsrfViewMiddleware&#39;,\n  &#39;django.contrib.auth.middleware.AuthenticationMiddleware&#39;,\n  &#39;django.contrib.messages.middleware.MessageMiddleware&#39;,\n  &#39;django.middleware.clickjacking.XFrameOptionsMiddleware&#39;,\n]</code></pre><pre><code>CORS_ORIGIN_ALLOW_ALL = True</code></pre></li>\n</ul>\n<p><em>References</em><br><a href="https://www.jianshu.com/p/9093894d2614">Vue+Django+MySQL搭建指南（个人全栈快速开发）</a><br><a href="https://zhuanlan.zhihu.com/p/25080236">我如何使用Django+Vue.js快速构建项目</a><br><a href="https://www.jianshu.com/p/dcd15f5731bf">Django与Vue之间的数据传递</a></p>\n<h3 id="integrate-celery-into-django">Integrate Celery into Django</h3>\n<ul>\n<li>Add &#39;djcelery&#39; to the INSTALLED_APPS in neurolearn/neurolearn/settings.py;<pre><code>INSTALLED_APPS = [\n  &#39;django.contrib.admin&#39;,\n  &#39;django.contrib.auth&#39;,\n  &#39;django.contrib.contenttypes&#39;,\n  &#39;django.contrib.sessions&#39;,\n  &#39;django.contrib.messages&#39;,\n  &#39;django.contrib.staticfiles&#39;,\n  &#39;backend&#39;,\n  &#39;djcelery&#39;,\n]</code></pre></li>\n<li>Configure RabbitMQ by add the following codes at the end of neurolearn/neurolearn/settings.py;<pre><code>import djcelery\ndjcelery.setup_loader()\nBROKER_HOST = &quot;localhost&quot;\nBROKER_PORT = 5672\nBROKER_USER = &quot;guest&quot;\nBROKER_PASSWORD = &quot;guest&quot;\nBROKER_VHOST = &quot;/&quot;</code></pre></li>\n<li>Running <code>$ python manage.py</code> will result in several new commands to control worker in celery;<pre><code>[djcelery]\n  celery\n  celerybeat\n  celerycam\n  celeryd\n  celeryd_detach\n  celeryd_multi\n  celerymon\n  djcelerymon</code></pre></li>\n<li>Add a file backend/tasks.py;<pre><code>from celery.decorators import task\n@task\ndef add(x, y):\nreturn x + y\n&#39;&#39;&#39;\n@ is the decorator, making the add function a callback function\nwhen calling add in a webapp, the add function doesn&#39;t execute immediately\ninstead the function name and parameters will be packed as a message and\nsent to the queue, then the worker will process these messages one by one\n&#39;&#39;&#39;</code></pre></li>\n<li>Create a worker awaiting task messages;<pre><code>$ python manage.py migrate\n$ python manage.py celeryd -l info</code></pre></li>\n<li>Open another console and use the following command to open interactive console;<pre><code>$ python manage.py shell\n&gt;&gt;&gt; from backend.tasks import add\n&gt;&gt;&gt; r = add.delay(3, 5)\n&gt;&gt;&gt; r.wait()\n8</code></pre></li>\n</ul>\n<p><em>References</em><br><a href="https://blog.csdn.net/dipolar/article/details/22162863">使用django+celery+RabbitMQ实现异步执行</a></p>\n<hr>\n<h2 id="neuro-learn-web">NEURO-LEARN-WEB</h2>\n<h3 id="ui-design">UI Design</h3>\n<h3 id="user-interface">User Interface</h3>\n<h4 id="vue-and-element-ui">Vue and Element-UI</h4>\n<ul>\n<li>Refer to <a href="http://element.eleme.io/#/en-US/component/">official site</a> for installation and usage guide;</li>\n<li>Use template from <a href="https://github.com/tmpbook/vue-template-with-element-ui">this repository</a>, which looks like <a href="https://tmpbook.github.io/vue-template-with-element-ui/#/table">this</a>;</li>\n<li>Replace frontend in the project with template, type the following commands to build the vue project, integrating it into django framework;<pre><code>$ npm install\n$ npm install node-sass // if needed\n$ npm run dev // serve with hot reload at localhost:8080\n$ npm run build // build for Django to serve at localhost:8000</code></pre></li>\n<li>To customize navigation menu and router, change the code in <strong>NavMenu.vue</strong> to configure the navigation, <strong>routes.js</strong> to configure the router, and <strong>index.vue</strong> in each page in <strong>pages</strong> to configure the template;</li>\n<li>The <strong>pages</strong> folder consists of <strong>home</strong> (routed by NEURO-LEARN title), <strong>overview</strong>, <strong>newtask</strong>, <strong>submissions</strong>, <strong>viewer</strong>, and <strong>help</strong>, which are routed by items in NavMenu except for home;<pre><code>Note: \nThe template is develped using element-ui 1.4, which is out of date. Use element-ui 2.7 when develop frontend.</code></pre></li>\n<li>The way to pass eslint check is to add a comment like below at the end of the code;<pre><code class="language-JavaScript">//eslint-disable-line</code></pre>\n</li>\n<li>To use scss, install node-sass and sass-loader;<pre><code>$ npm install --save-dev sass-loader style-loader css-loader</code></pre></li>\n<li>To change the theme colors in element-ui, refer to <a href="https://blog.csdn.net/youlinaixu/article/details/83447527">this site</a> for help;</li>\n<li>When defining the style of a page by css, name the class carefully or use a nested css since it is effective across files;</li>\n<li>Use <strong>this.$router.replace</strong> to realize in-page redireting;<pre><code class="language-JavaScript">this.$router.replace({\npath: &#39;/submissions&#39;,\ncomponent: resolve =&gt; require([&#39;@/pages/analysis/submissions&#39;], resolve)\n})</code></pre>\n</li>\n<li>Use <strong>this.$router.go(0)</strong> to realize in-page refreshing;</li>\n</ul>\n<p><em>References</em><br><a href="http://element-cn.eleme.io/1.4/#/zh-CN/component/">Element-UI Documentation</a>  </p>\n<h4 id="data-transaction">Data Transaction</h4>\n<ul>\n<li><p>Refer to <a href="https://github.com/rogerlh/django_with_vue">django_with_vue</a> and <a href="https://github.com/RogersLei/django-vue">django-vue</a> for examples of using axios and database for data transaction between Vue and Django;</p>\n</li>\n<li><p>As mentioned above, the configuration of databases is in the <strong>settings.py</strong>, and by default the name of table created by <strong>models.py</strong> is &#39;appname_modelclassname&#39;, in which the modelclassname refer to the class defined in <strong>models.py</strong>;</p>\n</li>\n<li><p>Models are called and instantiated by <strong>views.py</strong>, which received the http request from frontend and return a response;</p>\n</li>\n<li><p>The urls of functions in views are defined in <strong>urls.py</strong>， which is included in the <strong>urls.py</strong> in project folder;</p>\n</li>\n<li><p>The <strong>urls.py</strong> in project folder contains the urls when frontend sends request to <a href="http://127.0.0.1:8000/">http://127.0.0.1:8000/</a>;</p>\n</li>\n<li><p>As $http in vue requires an out-of-date module named vue-resource, it is recommended to use <a href="https://ykloveyxk.github.io/2017/02/25/axios%E5%85%A8%E6%94%BB%E7%95%A5/">axios</a> instead;</p>\n</li>\n<li><p>Using axios and django JsonResponse:</p>\n<ul>\n<li><p>Excecute POST request with axios to submit a task:</p>\n<pre><code class="language-JavaScript">// import axios from &#39;axios&#39;\naxios.post(&#39;http://127.0.0.1:8000/api/new_task&#39;, JSON.stringify(this.newform))\n    .then(response =&gt; {\n      var res = response.data\n      if (res.error_num === 0) {\n        this.$router.replace({\n          path: &#39;/submissions&#39;,\n          component: resolve =&gt; require([&#39;@/pages/analysis/submissions&#39;], resolve)\n        })\n        console.log(res)\n      } else {\n        this.$message.error(&#39;Failed submission!&#39;)\n        console.log(res[&#39;msg&#39;])\n      }\n    })</code></pre>\n<pre><code>Note: the &#39;newform&#39; object defined in data object in vue can&#39;t be within any other object, as it may not satisfy two-way data-binding with v-model.</code></pre></li>\n<li><p>Excecute GET request with axios to get all submissions list:</p>\n<pre><code class="language-JavaScript">// import axios from &#39;axios&#39;\naxios.get(&#39;http://127.0.0.1:8000/api/show_submissions&#39;)\n    .then(response =&gt; {\n      var res = response.data\n      if (res.error_num === 0) {\n        console.log(res)\n        this.submissions_table = res[&#39;list&#39;]\n        console.log(res[&#39;list&#39;])\n      } else {\n        this.$message.error(&#39;Failed!&#39;)\n        console.log(res[&#39;msg&#39;])\n      }\n    })</code></pre>\n<pre><code>Note: axios support promise, which is the function().then.then ... structure.</code></pre></li>\n<li><p>Uniform Resource Locator is defined in urls in backend app, which is included in urls in neurolearn_dev project:</p>\n<pre><code>from django.conf.urls import url, include\nfrom django.contrib import admin\nfrom django.views.generic import TemplateView\nimport backend.urls\nurlpatterns = [\n  url(r&#39;^admin/&#39;, admin.site.urls),\n  url(r&#39;^api/&#39;, include(backend.urls)),\n  url(r&#39;^$&#39;, TemplateView.as_view(template_name=&quot;index.html&quot;)),\n]\nfrom django.conf.urls import url, include\nfrom . import views\nurlpatterns = [\n  url(r&#39;add_book$&#39;, views.add_book, ),\n  url(r&#39;show_books$&#39;, views.show_books, ),\n  url(r&#39;new_task$&#39;, views.new_task, ),\n  url(r&#39;show_submissions$&#39;, views.show_submissions, ),\n  ]</code></pre></li>\n<li><p>Receive request and generate response in views inside django:</p>\n<pre><code>@require_http_methods([&quot;POST&quot;])\ndef new_task(request):\n  response = {}\n  postBody = json.loads(request.body)\n  try:\n      task = Submissions_Demo(\n          task_name=postBody.get(&#39;task_name&#39;),\n          task_type=postBody.get(&#39;task_type&#39;),\n          train_data=postBody.get(&#39;train_data&#39;),\n          test_data=postBody.get(&#39;test_data&#39;),\n          label=postBody.get(&#39;label&#39;),\n          feat_sel=postBody.get(&#39;feat_sel&#39;),\n          estimator=postBody.get(&#39;estimator&#39;),\n          cv_type=postBody.get(&#39;cv_type&#39;),\n          note=postBody.get(&#39;note&#39;),\n          verbose=postBody.get(&#39;verbose&#39;),\n          task_status=&#39;Submitted&#39;,\n          task_result=&#39;&#39;\n      )\n      task.save()\n      response[&#39;post_body&#39;] = postBody\n      response[&#39;msg&#39;] = &#39;success&#39;\n      response[&#39;error_num&#39;] = 0\n  except Exception as e:\n      response[&#39;post_body&#39;] = postBody\n      response[&#39;msg&#39;] = str(e)\n      response[&#39;error_num&#39;] = 1\n  return JsonResponse(response)\n@require_http_methods([&quot;GET&quot;])\ndef show_submissions(request):\n  response = {}\n  try:\n      submissions = Submissions_Demo.objects.filter()\n      response[&#39;list&#39;]  = json.loads(serializers.serialize(&quot;json&quot;, submissions))\n      response[&#39;msg&#39;] = &#39;success&#39;\n      response[&#39;error_num&#39;] = 0\n  except  Exception as e:\n      response[&#39;msg&#39;] = str(e)\n      response[&#39;error_num&#39;] = 1\n\n  return JsonResponse(response)</code></pre></li>\n<li><p>To initialize and manipulate databases, use models in django:</p>\n<pre><code>class Submissions_Demo(models.Model):\n  task_id = models.DateTimeField(&#39;Edit the date&#39;, auto_now=True)\n  task_name = models.CharField(max_length=64)\n  task_type = models.CharField(max_length=64)\n  train_data = models.CharField(max_length=64)\n  test_data = models.CharField(max_length=64)\n  label = models.CharField(max_length=64)\n  feat_sel = models.CharField(max_length=64)\n  estimator = models.CharField(max_length=64)\n  cv_type = models.CharField(max_length=64)\n  note = models.CharField(max_length=64)\n  verbose = models.BooleanField()\n  task_status = models.CharField(max_length=64)\n  task_result = models.CharField(max_length=1024)\n  def __unicode__(self):\n      return self.task_id</code></pre><pre><code>Note: after each altering of models, type &#39;python manage.py makemigrations&#39; and &#39;python manage.py migrate&#39; in commandline to alter databases.</code></pre></li>\n</ul>\n</li>\n<li><p>View databases and tables inside them:</p>\n<pre><code>$ mysql -u root -p\n$ password: root\nmysql&gt; use neurolearn_dev;\nmysql&gt; select * from backend_submissions_demo</code></pre></li>\n</ul>\n<p><em>references</em><br><a href="https://www.jianshu.com/p/dc71417c1dc2">Django模型Model自定义表名和字段列名</a><br><a href="https://ykloveyxk.github.io/2017/02/25/axios%E5%85%A8%E6%94%BB%E7%95%A5/">axios全攻略</a><br><a href="https://blog.csdn.net/qq_36947128/article/details/72832977">vue $http请求服务</a><br><a href="https://www.cnblogs.com/WQLong/p/8316152.html">Vue:axios中的POST请求传参问题</a><br><a href="https://www.jianshu.com/p/f271be791cce">Vue + Django</a></p>\n<h4 id="file-uploading">File Uploading</h4>\n<ul>\n<li><p>Refer to <a href="https://www.cnblogs.com/fnng/p/3740274.html">this blog</a> for the tutorial of using Django forms to realize file uploading;</p>\n</li>\n<li><p>First add an api redirecting to the view funciton upload_data;</p>\n<pre><code>url(r&#39;upload_data$&#39;, views.upload_data, ),</code></pre></li>\n<li><p>Add a table in the database containing data information;</p>\n<pre><code>class Data_Demo(models.Model):\n  data_id = models.DateTimeField(&#39;Edit the date&#39;, auto_now=True)\n  data_name = models.CharField(max_length=64)\n  data_path = models.CharField(max_length=128)\n\n  def __unicode__(self):\n      return self.task_id</code></pre></li>\n<li><p>Add view funciton to process request and save uploaded file;</p>\n<pre><code>@require_http_methods([&#39;POST&#39;])\ndef upload_data(request):\n  response = {}\n  try:\n      obj = request.FILES.get(&#39;test&#39;)\n      data = Data_Demo()\n      data.data_name = &#39;test&#39;\n      data.data_path = obj.name\n      data.save()\n      handle_uploaded_file(obj)   \n      response[&#39;msg&#39;] = &#39;success&#39;\n      response[&#39;error_num&#39;] = 0\n  except Exception as e:\n      response[&#39;msg&#39;] = str(e)\n      response[&#39;error_num&#39;] = 1\n  return JsonResponse(response)\ndef handle_uploaded_file(f):\n  try:\n      path = &#39;data/&#39;\n      if not os.path.exists(path):\n          os.makedirs(path)\n      else:\n          file_name = str(path + f.name)\n          destination = open(file_name, &#39;wb+&#39;)\n          for chunk in f.chunks():\n              destination.write(chunk)\n          destination.close()\n  except Exception as e:\n      print(e)\n  return f.name, path</code></pre></li>\n<li><p>Create a front-end template to upload file;</p>\n<pre><code>&lt;template&gt;\n&lt;div style=&quot;background-color: #FFFFFF; margin: 14px; padding: 14px&quot;&gt;\n  &lt;el-upload\n    class=&quot;upload-demo&quot;\n    action=&quot;http://127.0.0.1:8000/api/upload_data&quot;\n    name=&quot;test&quot;\n    :on-change=&quot;handleChange&quot;\n    :on-success=&quot;uploadSuccess&quot;\n    :file-list=&quot;fileList&quot;&gt;\n    &lt;el-button size=&quot;small&quot; type=&quot;primary&quot;&gt;点击上传&lt;/el-button&gt;\n    &lt;div slot=&quot;tip&quot; class=&quot;el-upload__tip&quot;&gt;只能上传jpg/png文件，且不超过500kb&lt;/div&gt;\n  &lt;/el-upload&gt;\n&lt;/div&gt;\n&lt;/template&gt;\n&lt;script&gt;\nexport default {\ndata () {\n  return {\n    fileList: []\n  }\n},\nmethods: {\n  handleChange (file, fileList) {\n    this.fileList = fileList.slice(-4)\n  },\n  uploadSuccess (response) {\n    console.log(response.error_num, response.msg)\n  }\n}\n}\n&lt;/script&gt;</code></pre></li>\n</ul>\n<p><em>references</em><br><a href="https://www.cnblogs.com/fnng/p/3740274.html">Django快速实现文件上传</a><br><a href="https://element.eleme.cn/#/zh-CN/component/upload">Element-UI Upload上传</a><br><a href="https://segmentfault.com/q/1010000011705007">Django多文件上传，只能保存最后一个文件</a><br><a href="https://blog.csdn.net/u012762054/article/details/80930408">Django文件上传到后台的三种方式</a></p>\n<h4 id="file-downloading">File Downloading</h4>\n<ul>\n<li>Refer to <a href="https://www.jb51.net/article/137790.htm">this site</a> for three ways of realizing file downloading in Django;<pre><code>@require_http_methods([&quot;GET&quot;])\ndef download_templates(request):\n  response = {}\n  template_type = request.GET.get(&#39;template_type&#39;)\n  template_file=open(&#39;templates/&#39; + template_type + &#39;.zip&#39;, &#39;rb&#39;)\n  response =FileResponse(template_file)\n  response[&#39;Content-Type&#39;]=&#39;application/octet-stream&#39;\n  response[&#39;Content-Disposition&#39;]=&#39;attachment;filename=\\&quot;&#39; + template_type + &#39;.zip\\&quot;&#39;\n  return response</code></pre><pre><code class="language-JavaScript">&lt;a href=&quot;http://127.0.0.1:8000/api/download_templates?template_type=dataset_templates&quot;&gt;&lt;/a&gt;</code></pre>\n</li>\n</ul>\n<h4 id="visualization">Visualization</h4>\n<ul>\n<li>Refer to <a href="https://blog.csdn.net/ding_312/article/details/82258442">this site</a> for the implementation of image transaction, to be specific,<pre><code>import io\nfrom PIL import Image\n@require_http_methods([&quot;GET&quot;])\ndef show_roc(request):\n  response = {}\n  task_id = request.GET.get(&#39;task_id&#39;)\n  buf = io.BytesIO()\n  img = Image.open(&#39;results/&#39; + task_id + &#39;/190514_ROC_curve_rfe_svm_test_data.png&#39;)\n  img.save(buf, &#39;png&#39;)\n  return HttpResponse(buf.getvalue(), &#39;image/png&#39;)</code></pre><pre><code>&lt;img :src=&quot;&#39;http://127.0.0.1:8000/api/show_roc?task_id=&#39; + this.taskid&quot; style=&quot;width: 700px&quot;&gt;</code></pre></li>\n<li>To use this taskid, we have to realize parameter passing between modules (in this case, submissions and viewer) using v-router;<pre><code class="language-JavaScript">// Source module\nonRowClick (row) {\n    this.$router.push({\n      path: &#39;/analysis/viewer&#39;,\n      query: {taskid: row.fields.task_id}\n    })\n  }\n// Destination module\ntaskid: this.$route.query.taskid,</code></pre>\n</li>\n</ul>\n<h3 id="service">Service</h3>\n<h4 id="celery-and-rabbitmq">Celery and RabbitMQ</h4>\n<ul>\n<li>Refer to <a href="https://blog.csdn.net/dipolar/article/details/22162863">this site</a> as before to get the basic idea of celery workers;</li>\n<li>Define own tasks;<pre><code>@task\ndef new_ml_task():\n  test_task()\n  return</code></pre></li>\n<li>Call the task in <strong>views.py</strong>;<pre><code>@require_http_methods([&quot;POST&quot;])\ndef new_task(request):\n  response = {}\n  postBody = json.loads(request.body)\n  try:\n      task = Submissions_Demo(\n          task_name=postBody.get(&#39;task_name&#39;),\n          task_type=postBody.get(&#39;task_type&#39;),\n          train_data=postBody.get(&#39;train_data&#39;),\n          test_data=postBody.get(&#39;test_data&#39;),\n          label=postBody.get(&#39;label&#39;),\n          feat_sel=postBody.get(&#39;feat_sel&#39;),\n          estimator=postBody.get(&#39;estimator&#39;),\n          cv_type=postBody.get(&#39;cv_type&#39;),\n          note=postBody.get(&#39;note&#39;),\n          verbose=postBody.get(&#39;verbose&#39;),\n          task_status=&#39;Submitted&#39;,\n          task_result=&#39;&#39;\n      )\n      task.save()\n      new_ml_task.delay()\n      ...</code></pre></li>\n<li>Initiate workers using the following command;<pre><code class="language-bash">$ python manage.py celeryd -l info</code></pre>\n</li>\n</ul>\n<h4 id="databases">Databases</h4>\n<ul>\n<li>To use Django-Model to manipulate databases, refer to <a href="https://www.cnblogs.com/yangmv/p/5327477.html">this site</a>;</li>\n<li>To visualize the database in a descending order, which means the frontmost item being the most recent one, refer to <a href="https://blog.csdn.net/qq_42402381/article/details/84105711">this site</a></li>\n</ul>\n<h3 id="deployment">Deployment</h3>\n<h4 id="local-server">Local Server</h4>\n<ul>\n<li>Refer to <a href="https://www.cnblogs.com/qcloud1001/p/10109835.html">this site</a> and <a href="https://blog.csdn.net/m0_37904728/article/details/78745243">this site</a> to deploy a Django+Vue project on production environment;</li>\n<li>If the console of the browser shows something like &#39;Resource interpreted as Stylesheet but transferred with MIME type text/plain&#39;, refer to <a href="https://blog.csdn.net/m0_37904728/article/details/78745243">this site</a> to solve it.</li>\n</ul>\n<h4 id="github">GitHub</h4>\n<ul>\n<li>To deploy a repository on GitHub, refer to <a href="http://www.cnblogs.com/yuanzm/p/3945814.html">this site</a>, basically after creating a project, pull a branch from it and replace all files with your own, then just commit;</li>\n</ul>\n'},NHnr:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=n("xd7I"),i={data:function(){return{activeIndex:"1"}},methods:{handleSelect:function(e,t){"1"===e?this.$router.replace({path:"/"}):"2"===e?this.$router.replace({path:"/Portfolio"}):"3"===e?this.$router.replace({path:"/Blog"}):"4-1"===e?window.open("https://github.com/Raniac","_blank"):"4-2"===e?window.open("https://www.jianshu.com/u/99cc5e74dd78","_blank"):"4-3"===e?window.location.href="mailto:leibingye@outlook.com":"4-4"===e&&this.$router.replace({path:"/Contact"})}}},o={render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{attrs:{id:"nav-area"}},[n("span",{staticStyle:{"background-color":"#00CCFF",width:"4px",height:"60px",float:"left"}}),e._v(" "),e._m(0),e._v(" "),n("el-menu",{attrs:{id:"nav-menu","default-active":e.activeIndex,mode:"horizontal","background-color":"#282828","text-color":"#FFFFFF","active-text-color":"#FF3300",float:"right"},on:{select:e.handleSelect}},[n("el-menu-item",{attrs:{index:"1"}},[e._v("HOME")]),e._v(" "),n("el-menu-item",{attrs:{index:"2"}},[e._v("PORTFOLIO")]),e._v(" "),n("el-menu-item",{attrs:{index:"3"}},[e._v("BLOG")]),e._v(" "),n("el-submenu",{attrs:{index:"4"}},[n("template",{slot:"title"},[e._v("CONTACT")]),e._v(" "),n("el-menu-item",{attrs:{index:"4-1"}},[n("i",{staticClass:"el-icon-user"}),e._v("GITHUB - Raniac")]),e._v(" "),n("el-menu-item",{attrs:{index:"4-2"}},[n("i",{staticClass:"el-icon-user"}),e._v("JIANSHU - Raniac")]),e._v(" "),n("el-menu-item",{attrs:{index:"4-3"}},[n("i",{staticClass:"el-icon-message"}),e._v("E-MAIL")]),e._v(" "),n("el-menu-item",{attrs:{index:"4-4"}},[n("i",{staticClass:"el-icon-chat-dot-round"}),e._v("SOCIAL MEDIA")])],2)],1)],1)},staticRenderFns:[function(){var e=this.$createElement,t=this._self._c||e;return t("div",{attrs:{id:"my-name"}},[t("div",{staticClass:"nav-link"},[this._v("BENNY RAY")])])}]};var s={render:function(){var e=this.$createElement,t=this._self._c||e;return t("div",{attrs:{id:"con-area"}},[t("iframe",{staticStyle:{position:"fixed",right:"0"},attrs:{frameborder:"no",border:"0",marginwidth:"0",marginheight:"0",width:"260",height:"50",src:"//music.163.com/outchain/player?type=2&id=1610850&auto=1&height=32"}}),this._v(" "),t("div",{attrs:{id:"content"}},[t("transition",{attrs:{name:"slide-fade"}},[t("router-view")],1)],1),this._v(" "),this._m(0),this._v(" "),t("span",{staticStyle:{"background-color":"#FF3300",width:"10%",height:"4px",float:"left"}}),this._v(" "),t("span",{staticStyle:{"background-color":"#282828",width:"80%",height:"4px",float:"left"}}),this._v(" "),t("span",{staticStyle:{"background-color":"#00CCFF",width:"10%",height:"4px",float:"right"}})])},staticRenderFns:[function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticStyle:{width:"100%",height:"34px","background-color":"#E8E8E8","text-align":"left"}},[t("div",{staticStyle:{width:"auto",color:"#282828","font-size":"14px",padding:"10px 20px"}},[this._v("© 2019 - 2020 Benny Ray / Made with Vue / Hosted on GitHub.io")])])}]};var r={name:"App",components:{Navigation:n("C7Lr")(i,o,!1,function(e){n("PU11")},null,null).exports,Container:n("C7Lr")({name:"Container"},s,!1,function(e){n("2dIX")},null,null).exports}},l={render:function(){var e=this.$createElement,t=this._self._c||e;return t("div",{attrs:{id:"app"}},[t("Navigation"),this._v(" "),t("Container")],1)},staticRenderFns:[]};var d=n("C7Lr")(r,l,!1,function(e){n("EOlj")},null,null).exports,c=n("ZWLj"),p={render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"page-area"},[e._m(0),e._v(" "),n("div",{staticStyle:{margin:"20px auto",width:"1000px",height:"auto","box-shadow":"0 0 10px #808080","text-align":"left"}},[n("div",{staticStyle:{padding:"40px 40px 20px 40px"}},[n("el-select",{staticStyle:{float:"right",width:"120px"},attrs:{size:"mini",placeholder:"Language"},on:{change:e.handleLangChange},model:{value:e.language,callback:function(t){e.language=t},expression:"language"}},[n("el-option",{attrs:{label:"English",value:"English"}}),e._v(" "),n("el-option",{attrs:{label:"中文",value:"Chinese"}})],1),e._v(" "),n("span",{staticStyle:{"background-color":"#282828",width:"4px",height:"30px",float:"left"}}),e._v(" "),n("strong",{staticStyle:{"font-size":"24px","line-height":"125%"}},[e._v(" ABOUT ME")]),e._v(" "),n("div",{staticStyle:{"font-size":"18px","line-height":"150%"}},[n("p",[e._v(e._s(e.about_p_1))]),e._v(" "),n("p",[e._v(e._s(e.about_p_2))])])],1)]),e._v(" "),e._m(1)])},staticRenderFns:[function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{staticStyle:{margin:"10px auto",width:"1000px",height:"340px","box-shadow":"0 0 10px #808080","text-align":"left"}},[a("img",{staticStyle:{float:"left",width:"auto",height:"100%",margin:"0"},attrs:{src:n("bBfv")}}),e._v(" "),a("div",{staticStyle:{float:"left",padding:"40px",width:"400px"}},[a("img",{staticStyle:{width:"140px",height:"140px",margin:"0",float:"right"},attrs:{src:n("dLd/")}}),e._v(" "),a("div",{staticStyle:{"font-size":"34px"}},[e._v("Hi! I'm Benny.")]),e._v(" "),a("div",{staticStyle:{"font-size":"34px"}},[e._v("嗨！我是炳業。")]),e._v(" "),a("div",{staticStyle:{"margin-top":"20px","font-size":"20px",color:"#505050"}},[e._v("Guangdong, China 中國廣東")]),e._v(" "),a("div",{staticStyle:{"margin-top":"20px","font-size":"20px",color:"#505050"}},[e._v("Master of Engineering")]),e._v(" "),a("div",{staticStyle:{"font-size":"20px",color:"#505050"}},[e._v("South China University of Technology")]),e._v(" "),a("div",{staticStyle:{"margin-top":"20px","font-size":"20px",color:"#282828"}},[a("strong",[e._v("INTERESTS:")]),e._v(" Artificial Intelligence, Web Development, Neuroinformatics, etc.")])]),e._v(" "),a("span",{staticStyle:{"background-color":"#282828",width:"4px",height:"340px",float:"right"}})])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticStyle:{margin:"20px auto",width:"1000px",height:"auto","box-shadow":"0 0 10px #808080","text-align":"left"}},[n("div",{staticStyle:{width:"100%",height:"340px"}},[n("span",{staticStyle:{"background-color":"#FF3300",width:"4px",height:"100%",float:"left"}}),e._v(" "),n("div",{staticStyle:{padding:"40px 40px 20px 40px"}},[n("strong",{staticStyle:{"font-size":"24px"}},[e._v("EDUCATION")]),e._v(" "),n("div",{staticStyle:{"font-size":"18px",padding:"10px","line-height":"150%"}},[n("li",[e._v("South China University of Technology 華南理工大學")]),e._v(" "),n("div",{staticStyle:{color:"#808080"}},[e._v("Master / Biomedical Engineering / Sep. 2018 - Present")]),e._v(" "),n("li",[e._v("Beijing Institute of Technology 北京理工大學")]),e._v(" "),n("div",{staticStyle:{color:"#808080"}},[e._v("Bachelor / Electronic Engineering / Sep. 2014 - July 2018")])]),e._v(" "),n("br"),e._v(" "),n("strong",{staticStyle:{"font-size":"24px"}},[e._v("EXPERIENCES")])])]),e._v(" "),n("div",{staticStyle:{width:"100%",height:"340px"}},[n("span",{staticStyle:{"background-color":"#282828",width:"4px",height:"100%",float:"left"}}),e._v(" "),n("div",{staticStyle:{padding:"20px 40px"}},[n("strong",{staticStyle:{"font-size":"24px"}},[e._v("TECH STACK")]),e._v(" "),n("div",{staticStyle:{"font-size":"18px",padding:"10px","line-height":"150%"}},[n("li",[e._v("Web Development")]),e._v(" "),n("div",{staticStyle:{color:"#808080","font-family":"Courier"}},[e._v("Vue.js Django MySQL Celery Git")]),e._v(" "),n("li",[e._v("Data Science")]),e._v(" "),n("div",{staticStyle:{color:"#808080","font-family":"Courier"}},[e._v("Scikit-Learn Numpy Pandas Keras Docker Linux")])])])]),e._v(" "),n("div",{staticStyle:{width:"100%",height:"340px"}},[n("span",{staticStyle:{"background-color":"#00CCFF",width:"4px",height:"100%",float:"left"}}),e._v(" "),n("div",{staticStyle:{padding:"20px 40px 40px 40px"}},[n("strong",{staticStyle:{"font-size":"24px"}},[e._v("PROJECTS")]),e._v(" "),n("div",{staticStyle:{"font-size":"18px",padding:"10px","line-height":"150%"}},[n("li",[n("a",{staticStyle:{"text-decoration":"none",color:"#000000"},attrs:{href:"https://github.com/Raniac/NEURO-LEARN",target:"_blank"}},[e._v("Raniac/NEURO-LEARN")])]),e._v(" "),n("div",{staticStyle:{color:"#808080"}},[e._v("A Decentralized Solution for Pattern Analysis of Neuroimaging Data")])])])])])}]};var h=n("C7Lr")({name:"Home",data:function(){return{language:"English",about_p_1:"I am currently a second-year graduate student in Department of Biomedical Engineering at South China University of Technology (SCUT). Before coming to SCUT, I got my B.Eng degree from School of Information and Electronic, Beijing Institute of Technology (BIT) in 2018.",about_p_2:'My research interests mainly focus on machine learning and its applications in neuroinformatics. I am also a big fan of web development and designing. I believe that the most import traits of an achiever are foresightedness and conscientiousness. My motto is "BE MORE", namely breadth and depth.'}},methods:{handleLangChange:function(){"English"===this.language?(this.about_p_1="I am currently a second-year graduate student in Department of Biomedical Engineering at South China University of Technology (SCUT). Before coming to SCUT, I got my B.Eng degree from School of Information and Electronic, Beijing Institute of Technology (BIT) in 2018.",this.about_p_2='My research interests mainly focus on machine learning and its applications in neuroinformatics. I am also a big fan of web development and designing. I believe that the most import traits of an achiever are foresightedness and conscientiousness. My motto is "BE MORE", namely breadth and depth.'):"Chinese"===this.language&&(this.about_p_1="我目前是一名華南理工大學生物醫學工程專業的碩士二年級研究生。來到華工前，我二零一八年在北京理工大學信息與電子學院取得學士學位。",this.about_p_2="我的研究興趣主要集中於機器學習及其在神經信息學領域中的應用。我也是網絡開發與設計的愛好者。我認爲一個成功人士最重要的特質包括前瞻性和責任心。我的座右銘是“BE MORE”，也即廣度與深度。")}}},p,!1,function(e){n("SbKI")},null,null).exports,u={render:function(){this.$createElement;this._self._c;return this._m(0)},staticRenderFns:[function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{staticClass:"page-area"},[a("div",{staticClass:"project-card"},[a("img",{staticStyle:{width:"160px",height:"160px",margin:"20px 40px",float:"left"},attrs:{src:n("ghrE")}}),e._v(" "),a("div",[e._v("null")])]),e._v(" "),a("div",{staticClass:"project-card"},[a("img",{staticStyle:{width:"160px",height:"160px",margin:"20px 40px",float:"left"},attrs:{src:n("ghrE")}}),e._v(" "),a("div",[e._v("null")])]),e._v(" "),a("div",{staticClass:"project-card"},[a("img",{staticStyle:{width:"160px",height:"160px",margin:"20px 40px",float:"left"},attrs:{src:n("ghrE")}}),e._v(" "),a("div",[e._v("null")])]),e._v(" "),a("div",{staticClass:"project-card"},[a("img",{staticStyle:{width:"160px",height:"160px",margin:"20px 40px",float:"left"},attrs:{src:n("ghrE")}}),e._v(" "),a("div",[e._v("null")])])])}]};var g=n("C7Lr")({name:"Portfolio",data:function(){return{}}},u,!1,function(e){n("SnQ4")},null,null).exports,m={render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"blog-overview"},[n("div",{staticClass:"blog-item",on:{click:function(t){return e.handleViewDetail("A02")}}},[n("span",{staticStyle:{"background-color":"#282828",width:"4px",height:"180px",float:"left"}}),e._v(" "),e._m(0)]),e._v(" "),n("div",{staticClass:"blog-item",on:{click:function(t){return e.handleViewDetail("A01")}}},[n("span",{staticStyle:{"background-color":"#282828",width:"4px",height:"180px",float:"left"}}),e._v(" "),e._m(1)])])},staticRenderFns:[function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticStyle:{float:"left"}},[t("div",{staticClass:"blog-title"},[t("i",{staticClass:"el-icon-document"}),this._v(" GNN——图网络相关知识整理")]),this._v(" "),t("div",{staticStyle:{margin:"0 40px","line-height":"40px",color:"#505050","text-align":"left","font-size":"28px"}},[this._v("2019-08-24")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticStyle:{float:"left"}},[t("div",{staticClass:"blog-title"},[t("i",{staticClass:"el-icon-document"}),this._v(" Django+Vue前后端分离开发")]),this._v(" "),t("div",{staticStyle:{margin:"0 40px","line-height":"40px",color:"#505050","text-align":"left","font-size":"28px"}},[this._v("2019-08-20")])])}]};var f=n("C7Lr")({name:"Blog",data:function(){return{}},methods:{handleViewDetail:function(e){this.$router.push({path:"/BlogDetail",query:{name:e}})}}},m,!1,function(e){n("B7zh")},null,null).exports,v=n("J0Ph"),_=n.n(v),b=n("XUs4"),y=n.n(b),w={name:"BlogDetail",data:function(){return{blogDetail:"",articleID:"",date:""}},mounted:function(){var e=this.$route.query.name;"A01"===e?(this.blogDetail=this.md2html(_.a),this.articleID="0a75d9083247",this.date="2019-08-20"):"A02"===e&&(this.blogDetail=this.md2html(y.a),this.articleID="a4f9ef4371cf",this.date="2019-08-24")},methods:{handleBackToFormer:function(){this.$router.replace({path:"/Blog"})},handleRedirect:function(){window.open("https://www.jianshu.com/p/"+this.articleID,"_blank")}}},x={render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"blog-detail"},[n("div",{staticClass:"user-avatar",on:{click:e.handleRedirect}},[n("span",{staticStyle:{"background-color":"#282828",width:"4px",height:"60px",float:"left"}}),e._v(" "),n("span",{staticClass:"avatar-img",style:{backgroundImage:"url(https://avatars2.githubusercontent.com/u/17725948?s=460&v=4)"}}),e._v(" "),n("div",{staticClass:"avatar-info"},[e._v(e._s(e.date))]),e._v(" "),n("div",{staticStyle:{float:"left","font-size":"20px","line-height":"40px",margin:"10px 10px",color:"#505050"}},[n("el-tooltip",{attrs:{content:"Check out the original article at JIANSHU",placement:"right"}},[n("i",{staticClass:"el-icon-connection"})])],1)]),e._v(" "),n("div",{staticClass:"back-to-former"},[n("div",{staticStyle:{"font-size":"40px",margin:"10px 20px",color:"#505050"},on:{click:e.handleBackToFormer}},[n("el-tooltip",{attrs:{content:"Close this article",placement:"left"}},[n("i",{staticClass:"el-icon-close"})])],1)]),e._v(" "),n("div",{directives:[{name:"highlight",rawName:"v-highlight"}],staticStyle:{width:"100%",padding:"40px 40px","max-width":"920px"},domProps:{innerHTML:e._s(e.blogDetail)}})])},staticRenderFns:[]};var S=n("C7Lr")(w,x,!1,function(e){n("iXAF")},null,null).exports,k={render:function(){this.$createElement;this._self._c;return this._m(0)},staticRenderFns:[function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{staticClass:"page-area",attrs:{id:"contact-area"}},[a("div",{staticClass:"contact-card"},[a("span",{staticStyle:{"background-color":"#33CC00",width:"8px",height:"200px",float:"left"}}),e._v(" "),a("img",{staticStyle:{width:"160px",height:"160px",margin:"20px 40px",float:"left"},attrs:{src:n("ghrE")}}),e._v(" "),a("div",{staticStyle:{float:"left",margin:"20px 10px",color:"#000000"}},[a("h1",[e._v("WeChat")]),e._v(" "),a("h2",[e._v("Benny_Ray")])]),e._v(" "),a("img",{staticStyle:{width:"160px",height:"160px",margin:"20px 40px",float:"right"},attrs:{src:n("g8ap")}})]),e._v(" "),a("div",{staticClass:"contact-card"},[a("span",{staticStyle:{"background-color":"#FF3300",width:"8px",height:"200px",float:"left"}}),e._v(" "),a("img",{staticStyle:{width:"160px",height:"160px",margin:"20px 40px",float:"left"},attrs:{src:n("ghrE")}}),e._v(" "),a("div",{staticStyle:{float:"left",margin:"20px 10px",color:"#000000"}},[a("h1",[e._v("Weibo")]),e._v(" "),a("h2",[e._v("RaniacSimpson")])]),e._v(" "),a("img",{staticStyle:{width:"160px",height:"160px",margin:"20px 40px",float:"right"},attrs:{src:n("bhmb")}})]),e._v(" "),a("div",{staticClass:"contact-card"},[a("span",{staticStyle:{"background-color":"#00CCFF",width:"8px",height:"200px",float:"left"}}),e._v(" "),a("img",{staticStyle:{width:"160px",height:"160px",margin:"20px 40px",float:"left"},attrs:{src:n("G8Ku")}}),e._v(" "),a("div",{staticStyle:{float:"left",margin:"20px 10px",color:"#000000"}},[a("h1",[e._v("Alipay")]),e._v(" "),a("h2",[e._v("RaniacSimpson")])]),e._v(" "),a("img",{staticStyle:{width:"160px",height:"160px",margin:"20px 40px",float:"right"},attrs:{src:n("EHTM")}})])])}]};var j=n("C7Lr")({name:"Contact",data:function(){return{}}},k,!1,function(e){n("FFjo")},null,null).exports;a.default.use(c.a);var E=new c.a({routes:[{path:"/",name:"Home",component:h},{path:"/Portfolio",name:"Portfolio",component:g},{path:"/Blog",name:"Blog",component:f},{path:"/BlogDetail",name:"BlogDetail",component:S},{path:"/Contact",name:"Contact",component:j}]}),$=n("bzuk"),C=n.n($),q=(n("4WSK"),n("Xcu2"),n("cmQl")),R=n.n(q),D=n("JWDa"),T=n.n(D);n("aIHS");a.default.directive("highlight",function(e){e.querySelectorAll("pre code").forEach(function(e){T.a.highlightBlock(e)})}),a.default.prototype.md2html=function(e){var t=new R.a.Converter,n=e.toString();return t.makeHtml(n)},a.default.config.productionTip=!1,a.default.use(C.a),new a.default({el:"#app",router:E,components:{App:d},template:"<App/>"})},PU11:function(e,t){},SbKI:function(e,t){},SnQ4:function(e,t){},XUs4:function(e,t){e.exports='<h1 id="gnn图网络相关知识整理">GNN——图网络相关知识整理</h1>\n<blockquote>\n<p>未经许可请勿转载。<br>Please do not reprint this article without permission.</p>\n</blockquote>\n<h2 id="introduction-引言">Introduction 引言</h2>\n<p>Due to its performance in non-euclidean spatial data, GNN methods are gradually appealing to the attention of researchers. Traditional deep neural networks take Euclidean-structured data as input, which is one of the reasons for its excellent performance in computer vision and other fields. However, in real life, there are many non-euclidean data, such as social network, retail network and biological network. In the field of brain neuroinformatics where the author focuses, one of the most commonly used methods of brain image analysis is voxel-based morphology, but different areas of the human brain are usually correlated and interacting, the brain network constructed based on which can reveal the higher-level brain activity mechanism. Similar to other topological network data, brain network is usually represented in the form of connection matrices, which cannot be directly vectorized and fed into machine learning models. However, the emergence of graph network analysis method breaks the deadlock.<br>得益于其在非欧几里得空间数据中的表现，图网络研究方法正逐渐吸引着研究人员的关注。传统的深度神经网络将欧几里得空间结构化数据作为输入，这也是其在计算机视觉等领域有着优异表现的原因之一。但现实生活中往往存在着各种非欧几里得结构的数据，例如社交网络数据、零售网络数据以及生物网络数据等。以笔者所处的脑神经信息学领域来说，目前常用的脑神经影像分析手段都是基于体素的形态学分析，但人脑的不同区域往往存在着相互关联和影响，以此为基础构建出的脑网络往往能反映出更深层次的大脑活动机理。而正如其他网络拓扑结构数据，脑网络通常以连接矩阵的形式表示，无法通过直观的手段将其向量化，作为机器学习模型的输入。而图网络分析方法的出现打破了这种僵局。</p>\n<h2 id="theory-基础理论">Theory 基础理论</h2>\n<h3 id="what-is-graph-什么是图？">What is GRAPH? 什么是图？</h3>\n<blockquote>\n<p>Graphs are a kind of common data structure used to represent objects and the interactions among them. Objects are expressed by nodes or vertices, and their interactions or connections are described by edges. A graph is mathematically expressed by $G=(V,E,A,X)$, where $ V={v1,v2……,vn}$ is the set of nodes, $E=e_{ij}$ is the set of edges, $A$ is a matrix with size of $|V|×|V|$ used to describe the relationships between nodes. If $e_{ij}∈E$, then $A_{ij}=1$. Moreover, $X$ is the feature matrix with size of $|V|×d$ , where $X_i$ means the attributes or features of the $i$th node, and $d$ is the dimension of the attributes.<br>图是一种常见的数据结构，用于表示对象及其之间的关系。其中，对象又称节点（node）或顶点（vertex），关系用边（edge）来描述。在数学上一般用 $G=(V,E,A,X)$ 来表示，其中$ V={v1,v2……,vn}$ 是节点集合，$E=e_{ij}$ 表示边的集合，$A$ 是大小为$|V|×|V|$的邻接矩阵，用于表示节点之间的连接关系，如果 $e_{ij}∈E$，则 $A_{ij}=1$，$X$ 是大小为$|V|×d$ 的特征矩阵，$X$ 的第$ i$ 行 $X_i$表示第 $i$ 个节点的属性特征，其中 $d$ 是属性的维度。<br><em>Reference:</em> <a href="https://www.jiqizhixin.com/articles/2019-08-12-9">从数据结构到算法：图网络方法初探</a></p>\n</blockquote>\n<p>Simply put, a graph is an abstract and irregular data structure that can be used to describe and model complex systems. Different from Euclidean spatial data, graphs in real world usually have complex topological structure and huge data size. Using traditional graph analysis methods would be difficult to achieve the same level of performance as applications of machine learning like computer vision, while existing machine learning algorithms cannot be applied to graph data straightforward. In view of this, how to combine machine learning with graph data analysis method, capture the interactions between data nodes in graphs and mine the information therein, has become a hot trend in the field of machine learning.<br>简单来说，图是一种抽象而不规则的数据结构，可以用于描述和建模复杂的系统。不同于欧几里得空间数据，现实中的图往往具有复杂的拓扑结构和庞大的数据量，传统的图分析方法难以实现与计算机视觉领域相当的应用水平和模型性能，而现有的机器学习算法不能直接应用于图数据中。鉴于此，如何将机器学习与图数据分析方法结合起来，捕捉图结构中数据之间的依赖关系，挖掘其中的信息，成为了机器学习领域的一股热潮。</p>\n<h3 id="notations-of-gnn-图网络中的符号表示">Notations of GNN 图网络中的符号表示</h3>\n<p><img src="https://upload-images.jianshu.io/upload_images/13702947-2dd9c2cb8a3ce269.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Notations of GNN"></p>\n<h3 id="theory-of-gcn-图卷积网络原理">Theory of GCN 图卷积网络原理</h3>\n<p>Generally, before data is fed into machine learning algorithm models, it needs to be processed to extract valuable features, which can not only improve the quality of input data, but also greatly improve the reliability and performance of the model. This process is called feature engineering. Since the quality of feature engineering methods directly determines the performance of models, the research of data mining focuses on the handcrafted design and extraction of valuable features for specific data. For example, neuroimaging data often contains a lot of noise and has very high resolution, which is not suitable for direct input to machine learning models. Therefore, we preprocess the data and calculate the corresponding feature vectors, which are fed into the analysis model.<br>通常，在将数据输入到强大的机器学习算法模型中之前，需要将其进行一定的处理，提取出有价值的特征，这样不仅可以提高数据的质量，更能大大提升模型的可靠性和性能，这一处理过程被称作特征工程。正因为特征工程方法的好坏直接决定着模型的性能，数据挖掘的研究都将重心放在了针对特定的数据人工设计有价值的特征上。举例来说，神经影像数据通常作为包含着多种噪音，并且分辨率极高，不适合直接作为机器学习模型的输入。因此笔者将数据进行一定的预处理并计算出相应的特征向量，在输入到分析模型中。<br>Deep learning is essentially a kind of &quot;feature engineering&quot;, or mostly called &quot;feature learning&quot;. This is because the general idea of deep learning is to transform the original data into higher-level features through the nonlinear transformation model of neural network, and these features are usually a vector that can be used as the input of classifiers. The graph convolutional neural network mentioned in this section is a method that can represent the nodes and edges in the graph using feature vectors to serve as the input of high-performance machine learning algorithm model. This method of embedding graph nodes into low-dimensional Euclidean space is also called graph embedding method.<br>深度学习本质上就是一种“特征工程”，更多地被称为“特征学习”。这是由于深度学习的思想就是将原始数据通过神经网络这一非线性变换模型转变为更高层次的特征，而这些特征通常是一个向量，可以作为分类器的输入。本节提到的图卷积神经网络就是一种能够将图中的节点和边使用特征向量表示出来，以作为高性能机器学习算法模型的输入的方法，这种将图节点嵌入到低维欧几里得空间中的方法也称作图嵌入方法。</p>\n<blockquote>\n<p>可以使用动图来理解图卷积算法：<br>第一步：发射（send）每一个节点将自身的特征信息经过变换后发送给邻居节点。这一步是在对节点的特征信息进行抽取变换。<br><img src="https://upload-images.jianshu.io/upload_images/7803390-08e00a8fc4041f9d?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000" alt="Step 1 SEND"><br>第二步：接收（receive）每个节点将邻居节点的特征信息聚集起来。这一步是在对节点的局部结构信息进行融合。<br><img src="https://upload-images.jianshu.io/upload_images/7803390-983aa31f57260e1a?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000" alt="Step 2 RECEIVE"><br>第三步：变换（transform）把前面的信息聚集之后做非线性变换，增加模型的表达能力。<br><img src="https://upload-images.jianshu.io/upload_images/7803390-538212c7e8060829?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000" alt="Step 3 TRANSFORM"><br><em>Reference:</em> <a href="https://www.jianshu.com/p/89fbed65cd04?winzoom=1">浅析图卷积神经网络</a></p>\n</blockquote>\n<p><img src="https://upload-images.jianshu.io/upload_images/7803390-8e7feec1250af1a8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000" alt="Graph Convolution Operator (Source: https://www.jianshu.com/p/89fbed65cd04?winzoom=1)"></p>\n<p>上面给出的是图卷积算子的计算公式，设中心节点为$i$，$h^{l}<em>{i}$是节点$i$在第$l$层的特征表达，$c</em>{ij}$是归一化因子，如取节点度的倒数，$N_{i}$是节点$i$的邻节点，包含自身，$R_{i}$是节点$i$的类型，$W^{l}_{R_j}$表示$R_j$类型节点的变换权重参数，$\\sigma$表示激活函数。</p>\n<h2 id="categorization-of-gnn-models-模型分类">Categorization of GNN Models 模型分类</h2>\n<h2 id="applications-and-open-source-implementations-应用和开源实现">Applications and Open-Source Implementations 应用和开源实现</h2>\n<ul>\n<li><a href="https://github.com/sarslancs/graph_saliency_maps">Graph Saliency Maps</a> provides the implementation of an activation-based visual attribution method for irregular graphs, which works integrated with graph convolutional neural networks (GCNs). The method has been validated via a sex classification task using functional brain connectivity networks (<a href="https://arxiv.org/abs/1806.01764">paper</a>);</li>\n<li><a href="https://github.com/HOLMES1891/SGCN">SGCN</a> is a Siamese Graph Convolution Network for learning multi-view brain network embedding;</li>\n</ul>\n'},Xcu2:function(e,t){},aIHS:function(e,t){},bBfv:function(e,t,n){e.exports=n.p+"static/img/Me.7bcd548.jpg"},bhmb:function(e,t,n){e.exports=n.p+"static/img/Weibo_QR.ad6383b.png"},"dLd/":function(e,t,n){e.exports=n.p+"static/img/logo.0af653f.png"},g8ap:function(e,t,n){e.exports=n.p+"static/img/WeChat_QR.18e5d54.jpg"},ghrE:function(e,t,n){e.exports=n.p+"static/img/Vegito.9d624ff.jpg"},iXAF:function(e,t){}},["NHnr"]);
//# sourceMappingURL=app.41f0e5e44849f0278061.js.map